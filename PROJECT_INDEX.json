{
  "indexed_at": "2025-08-18T23:15:28.969200",
  "root": ".",
  "project_structure": {
    "type": "tree",
    "root": ".",
    "tree": [
      ".",
      "\u251c\u2500\u2500 scripts/ (9 files)",
      "\u2514\u2500\u2500 README.md"
    ]
  },
  "documentation_map": {
    "CLAUDE.md": {
      "sections": [
        "CLAUDE.md",
        "Project Overview",
        "Commands",
        "Development and Testing",
        "Test the indexer locally (from project root)",
        "Run with version check",
        "Test update hooks",
        "Test reindex logic",
        "Test Windows compatibility",
        "Run installation"
      ],
      "architecture_hints": []
    },
    "README.md": {
      "sections": [
        "CLAUDE-CODE-PROJECT-INDEX (Windows)",
        "\ud83d\ude80 Quick Install",
        "Clone this repository",
        "Run the installer",
        "\ud83d\udcd6 Usage",
        "Create an Index for Your Project",
        "Using the Index",
        "\u2728 Key Features",
        "\ud83c\udfd7\ufe0f Architectural Awareness",
        "\ud83d\udcda Language Support"
      ],
      "architecture_hints": []
    },
    "WINDOWS_SETUP.md": {
      "sections": [
        "Windows Setup Guide for PROJECT_INDEX",
        "Prerequisites",
        "Installation",
        "Quick Install",
        "Navigate to the project directory",
        "Run the Python installer",
        "Verify Installation",
        "Run the test suite",
        "Usage",
        "Creating an Index"
      ],
      "architecture_hints": []
    }
  },
  "directory_purposes": {
    "scripts": "Build and utility scripts"
  },
  "stats": {
    "total_files": 14,
    "total_directories": 2,
    "fully_parsed": {
      "python": 8,
      "shell": 1
    },
    "listed_only": {
      "shell": 4,
      "json": 1
    },
    "markdown_files": 7
  },
  "files": {
    "install.py": {
      "language": "python",
      "parsed": true,
      "functions": {
        "print_header": {
          "doc": "Print installation header",
          "signature": "()"
        },
        "find_python": {
          "doc": "Find the best Python interpreter to use on Windows",
          "signature": "()"
        },
        "check_dependencies": {
          "doc": "Check for optional dependencies",
          "signature": "()"
        },
        "backup_settings": {
          "doc": "Create a backup of settings.json",
          "signature": "(settings_file)"
        },
        "update_hooks": {
          "doc": "Update hooks in settings.json for Windows",
          "calls": [
            "backup_settings"
          ],
          "signature": "(settings_file, install_dir)"
        },
        "create_index_command": {
          "doc": "Create the /index command for Windows",
          "signature": "(python_cmd)"
        },
        "install_from_local": {
          "doc": "Install from local repository",
          "signature": "(source_dir, install_dir)"
        },
        "test_installation": {
          "doc": "Test the installation",
          "signature": "(python_cmd)"
        },
        "main": {
          "doc": "Main installation process",
          "calls": [
            "check_dependencies",
            "create_index_command",
            "find_python",
            "install_from_local",
            "main",
            "print_header",
            "test_installation",
            "update_hooks"
          ],
          "signature": "()"
        }
      },
      "classes": {},
      "updated_by_hook": true,
      "updated_at": "2025-08-19T00:03:12.623965"
    },
    "install.sh": {
      "language": "shell",
      "parsed": false
    },
    "uninstall.py": {
      "language": "python",
      "parsed": true,
      "functions": {
        "print_header": {
          "doc": "Print uninstallation header",
          "signature": "()"
        },
        "remove_hooks": {
          "doc": "Remove PROJECT_INDEX hooks from settings.json",
          "signature": "(settings_file)"
        },
        "remove_command": {
          "doc": "Remove the /index command",
          "signature": "()"
        },
        "remove_installation": {
          "doc": "Remove the installation directory",
          "signature": "()"
        },
        "main": {
          "doc": "Main uninstallation process",
          "calls": [
            "print_header",
            "remove_command",
            "remove_hooks",
            "remove_installation"
          ],
          "signature": "()"
        }
      },
      "classes": {},
      "updated_by_hook": true,
      "updated_at": "2025-08-19T00:04:10.535551"
    },
    "uninstall.sh": {
      "language": "shell",
      "parsed": false
    },
    ".claude\\settings.local.json": {
      "language": "json",
      "parsed": false,
      "purpose": "Configuration"
    },
    "scripts\\detect_external_changes.py": {
      "language": "python",
      "parsed": true,
      "imports": [
        "os",
        "json",
        "pathlib",
        "datetime",
        "subprocess",
        "sys"
      ],
      "functions": {
        "get_file_mtime": {
          "doc": "Get file modification time as timestamp.",
          "signature": "(file_path)",
          "called_by": [
            "detect_external_changes"
          ]
        },
        "detect_external_changes": {
          "calls": [
            "get_file_mtime"
          ],
          "signature": "(index_path, project_root)"
        },
        "check_git_changes": "(project_root)"
      },
      "classes": {},
      "call_graph": {}
    },
    "scripts\\find_python.sh": {
      "language": "shell",
      "parsed": true,
      "functions": {
        "find_python": {
          "signature": "()",
          "called_by": [
            "main"
          ]
        }
      },
      "call_graph": {}
    },
    "scripts\\index_utils.py": {
      "language": "python",
      "parsed": true,
      "purpose": "Utility functions",
      "imports": [
        "re",
        "fnmatch",
        "pathlib",
        "typing"
      ],
      "functions": {
        "extract_function_calls_python": {
          "doc": "Extract function calls from Python code body.",
          "signature": "(body: str, all_functions: Set[str]) -> List[str]",
          "called_by": [
            "extract_python_signatures"
          ]
        },
        "extract_function_calls_javascript": {
          "doc": "Extract function calls from JavaScript/TypeScript code body.",
          "signature": "(body: str, all_functions: Set[str]) -> List[str]",
          "called_by": [
            "extract_javascript_signatures"
          ]
        },
        "build_call_graph": {
          "doc": "Build bidirectional call graph from extracted functions and methods.",
          "signature": "(functions: Dict, classes: Dict) -> Tuple[Dict, Dict]"
        },
        "extract_python_signatures": {
          "doc": "Extract Python function and class signatures with full details for all files.",
          "calls": [
            "extract_function_calls_python"
          ],
          "signature": "(content: str) -> Dict[str, Dict]"
        },
        "extract_javascript_signatures": {
          "doc": "Extract JavaScript/TypeScript function and class signatures with full details.",
          "calls": [
            "extract_function_calls_javascript"
          ],
          "signature": "(content: str) -> Dict[str, any]"
        },
        "extract_function_calls_shell": {
          "doc": "Extract function calls from shell script body.",
          "signature": "(body: str, all_functions: Set[str]) -> List[str]",
          "called_by": [
            "extract_shell_signatures"
          ]
        },
        "extract_shell_signatures": {
          "doc": "Extract shell script function signatures and structure.",
          "calls": [
            "extract_function_calls_shell"
          ],
          "signature": "(content: str) -> Dict[str, any]"
        },
        "extract_markdown_structure": {
          "doc": "Extract headers and architectural hints from markdown files.",
          "signature": "(file_path: Path) -> Dict[str, List[str]]"
        },
        "infer_file_purpose": {
          "doc": "Infer the purpose of a file from its name and location.",
          "signature": "(file_path: Path) -> Optional[str]"
        },
        "infer_directory_purpose": {
          "doc": "Infer directory purpose from naming patterns and contents.",
          "signature": "(path: Path, files_within: List[str]) -> Optional[str]"
        },
        "get_language_name": {
          "doc": "Get readable language name from extension.",
          "signature": "(extension: str) -> str"
        },
        "parse_gitignore": {
          "doc": "Parse a .gitignore file and return list of patterns.",
          "signature": "(gitignore_path: Path) -> List[str]",
          "called_by": [
            "load_gitignore_patterns"
          ]
        },
        "load_gitignore_patterns": {
          "doc": "Load all gitignore patterns from project root and merge with defaults.",
          "calls": [
            "parse_gitignore"
          ],
          "signature": "(root_path: Path) -> Set[str]",
          "called_by": [
            "should_index_file"
          ]
        },
        "matches_gitignore_pattern": {
          "doc": "Check if a path matches any gitignore pattern.",
          "signature": "(path: Path, patterns: Set[str], root_path: Path) -> bool",
          "called_by": [
            "should_index_file"
          ]
        },
        "should_index_file": {
          "doc": "Check if we should index this file.",
          "calls": [
            "load_gitignore_patterns",
            "matches_gitignore_pattern"
          ],
          "signature": "(path: Path, root_path: Path = None) -> bool"
        }
      },
      "classes": {},
      "constants": {
        "IGNORE_DIRS": "collection",
        "PARSEABLE_LANGUAGES": "collection",
        "CODE_EXTENSIONS": "collection",
        "MARKDOWN_EXTENSIONS": "collection",
        "DIRECTORY_PURPOSES": "collection"
      },
      "call_graph": {}
    },
    "scripts\\project-index-helper.sh": {
      "language": "shell",
      "parsed": false,
      "purpose": "Utility functions"
    },
    "scripts\\project_index.py": {
      "language": "python",
      "parsed": true,
      "functions": {
        "generate_tree_structure": {
          "doc": "Generate a compact ASCII tree representation of the directory structure.",
          "calls": [
            "add_tree_level",
            "should_include_dir"
          ],
          "signature": "(root_path: Path, max_depth: int = MAX_TREE_DEPTH) -> List[str]"
        },
        "build_index": {
          "doc": "Build the enhanced index with architectural awareness.",
          "calls": [
            "generate_tree_structure"
          ],
          "signature": "(root_dir: str) -> Tuple[Dict, int]"
        },
        "compress_index_if_needed": {
          "doc": "Compress index if it exceeds size limit.",
          "signature": "(index: Dict) -> Dict"
        },
        "print_summary": {
          "doc": "Print a helpful summary of what was indexed.",
          "signature": "(index: Dict, skipped_count: int)"
        },
        "main": {
          "doc": "Run the enhanced indexer.",
          "calls": [
            "build_index",
            "compress_index_if_needed",
            "print_summary"
          ],
          "signature": "()"
        }
      },
      "classes": {},
      "updated_by_hook": true,
      "updated_at": "2025-08-18T23:36:21.343910"
    },
    "scripts\\project_index_helper.py": {
      "language": "python",
      "parsed": true,
      "functions": {
        "main": {
          "doc": "Execute the project_index.py script",
          "signature": "()"
        }
      },
      "classes": {},
      "updated_by_hook": true,
      "updated_at": "2025-08-18T23:31:23.138594",
      "purpose": "Utility functions"
    },
    "scripts\\reindex_if_needed.py": {
      "language": "python",
      "parsed": true,
      "functions": {
        "check_index_features": {
          "doc": "Check if index has all required features.",
          "signature": "(index_path)"
        },
        "check_index_staleness": {
          "doc": "Check if index is older than threshold.",
          "signature": "(index_path, threshold_hours=24)"
        },
        "check_missing_documentation": {
          "doc": "Check if important documentation files are missing from index.",
          "signature": "(index_path, project_root)"
        },
        "check_structural_changes": {
          "doc": "Check if directory structure has significantly changed.",
          "signature": "(index_path, project_root)"
        },
        "count_hook_updates": {
          "doc": "Count how many files were updated by hooks vs full index.",
          "signature": "(index_path)"
        },
        "run_reindex": {
          "doc": "Run the project_index.py script to perform full reindex.",
          "signature": "(project_root)"
        },
        "main": {
          "doc": "Main hook entry point.",
          "calls": [
            "check_index_features",
            "check_index_staleness",
            "check_missing_documentation",
            "check_structural_changes",
            "count_hook_updates",
            "run_reindex"
          ],
          "signature": "()"
        }
      },
      "classes": {},
      "updated_by_hook": true,
      "updated_at": "2025-08-18T23:43:31.287392"
    },
    "scripts\\run_python.sh": {
      "language": "shell",
      "parsed": false
    },
    "scripts\\update_index.py": {
      "language": "python",
      "parsed": true,
      "imports": [
        "json",
        "sys",
        "os",
        "pathlib",
        "datetime",
        "index_utils"
      ],
      "functions": {
        "find_index_utils": {
          "doc": "Find index_utils.py in the project directory or system location.",
          "signature": "()"
        },
        "update_file_in_index": {
          "doc": "Update a single file's entry in the enhanced index.",
          "signature": "(index_path, file_path, project_root)",
          "called_by": [
            "main"
          ]
        },
        "main": {
          "doc": "Process PostToolUse hook input and update index.",
          "calls": [
            "update_file_in_index"
          ],
          "signature": "()",
          "called_by": [
            "main"
          ]
        }
      },
      "classes": {},
      "call_graph": {}
    }
  },
  "dependency_graph": {
    "install.py": [
      "os",
      "sys",
      "json",
      "shutil",
      "platform",
      "subprocess",
      "pathlib",
      "argparse",
      "uninstall",
      "sys",
      "subprocess",
      "pathlib"
    ],
    "uninstall.py": [
      "os",
      "sys",
      "json",
      "shutil",
      "pathlib"
    ],
    "scripts\\detect_external_changes.py": [
      "os",
      "json",
      "pathlib",
      "datetime",
      "subprocess",
      "sys"
    ],
    "scripts\\index_utils.py": [
      "re",
      "fnmatch",
      "pathlib",
      "typing"
    ],
    "scripts\\project_index.py": [
      "json",
      "os",
      "re",
      "sys",
      "platform",
      "datetime",
      "pathlib",
      "typing",
      "index_utils",
      "sys"
    ],
    "scripts\\project_index_helper.py": [
      "sys",
      "subprocess",
      "pathlib"
    ],
    "scripts\\reindex_if_needed.py": [
      "json",
      "sys",
      "os",
      "subprocess",
      "pathlib",
      "datetime"
    ],
    "scripts\\update_index.py": [
      "json",
      "sys",
      "os",
      "pathlib",
      "datetime",
      "index_utils"
    ]
  },
  "staleness_check": 1754946929.037381
}